import json
import os
import logging
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from dotenv import load_dotenv

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

USER_DATA_FILE = "user_data.json"

def load_user_data():
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –í–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
questions = [
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –º–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏–ª–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —Ä–∞–¥–æ—Å—Ç—å?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É—Å—Ç–∞–ª—ã–º –∏–ª–∏ –±–µ–∑ —Å–∏–ª?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤–∞–º —Ç—Ä—É–¥–Ω–æ –∑–∞—Å—ã–ø–∞—Ç—å –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –æ—â—É—â–∞–µ—Ç–µ, —á—Ç–æ –≤—Å—ë –≤ –∂–∏–∑–Ω–∏ —Ç–µ—Ä—è–µ—Ç —Å–º—ã—Å–ª?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–µ—Ä–≤–Ω—ã–º –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π–Ω—ã–º?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –±–µ—Å–ø–æ–º–æ—â–Ω—ã–º –∏–ª–∏ –æ–¥–∏–Ω–æ–∫–∏–º?"
]

answer_options = ["–ù–∏–∫–æ–≥–¥–∞", "–ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π", "–ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"]

scores_map = {"–ù–∏–∫–æ–≥–¥–∞": 0, "–ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π": 1, "–ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏": 2, "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å": 3}

user_answers = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –ª–æ–≥–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = load_user_data()
    name = user_data.get(str(user_id), {}).get("name", "–¥—Ä—É–≥")

    keyboard = [
        [KeyboardButton("üìù –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton("üìî –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")],
        [KeyboardButton("üßò‚Äç‚ôÇÔ∏è –†–µ–ª–∞–∫—Å–∞—Ü–∏—è"), KeyboardButton("üí¨ –¶–∏—Ç–∞—Ç—ã")],
        [KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton("üéØ –¶–µ–ª–∏")],
        [KeyboardButton("‚ùì FAQ"), KeyboardButton("üö® –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
        "- –ü—Ä–æ–≤–µ—Å—Ç–∏ —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
        "- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "- –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–∏ –±–∞–ª–ª—ã\n"
        "- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
        "- –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "- –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏\n"
        "- –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç–∞–º–∏\n"
        "- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–º—è: /setname –ò–≤–∞–Ω\n"
        "- –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: /diagnosis\n\n"
        "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫."
    )

async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    name = " ".join(context.args)

    if name:
        user_data = load_user_data()
        if str(user_id) not in user_data:
            user_data[str(user_id)] = {}
        user_data[str(user_id)]["name"] = name
        save_user_data(user_data)
        await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setname –ò–≤–∞–Ω")

# --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ---

async def start_diagnosis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_answers[user_id] = []
    await ask_question(update, context, user_id, 0)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, question_number: int):
    if question_number < len(questions):
        question = questions[question_number]
        keyboard = [
            [InlineKeyboardButton(option, callback_data=f"answer_{user_id}_{question_number}_{option}")]
            for option in answer_options
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message:
            await update.message.reply_text(question, reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.message.reply_text(question, reply_markup=reply_markup)
    else:
        await evaluate_answers(update, context, user_id)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data_parts = query.data.split("_")
    user_id = int(data_parts[1])
    question_number = int(data_parts[2])
    answer = "_".join(data_parts[3:])

    user_answers[user_id].append(answer)

    if question_number + 1 < len(questions):
        await ask_question(update, context, user_id, question_number + 1)
    else:
        await evaluate_answers(update, context, user_id)

async def evaluate_answers(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    total_score = sum(scores_map[answer] for answer in user_answers[user_id])

    if total_score <= 5:
        result = "–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ."
    elif 6 <= total_score <= 10:
        result = "–ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å."
    elif 11 <= total_score <= 15:
        result = "–í–æ–∑–º–æ–∂–Ω–æ —É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è. –ü–æ–¥—É–º–∞–π—Ç–µ –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º."
    else:
        result = "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —Ç—è–∂—ë–ª—É—é –¥–µ–ø—Ä–µ—Å—Å–∏—é. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é."

    user_data = load_user_data()
    history = user_data.get(str(user_id), {}).get("history", [])
    history.append({
        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "score": total_score
    })
    user_data[str(user_id)] = {"history": history, **user_data.get(str(user_id), {})}
    save_user_data(user_data)

    await generate_progress_graph(user_id, history)

    await update.callback_query.message.edit_text(
        f"–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n–û–±—â–∏–π –±–∞–ª–ª: {total_score}\n\n{result}\n\n–í–æ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:"
    )
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(f"progress_{user_id}.png", "rb"))

async def generate_progress_graph(user_id: int, history: list):
    scores = [entry["score"] for entry in history]
    dates = [entry["date"] for entry in history]

    plt.figure(figsize=(8, 6))
    plt.plot(dates, scores, marker='o', linestyle='-', color='blue')
    plt.title(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ë–∞–ª–ª—ã")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(f"progress_{user_id}.png")
    plt.close()

# --- –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ---

async def mood_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è.")

async def mood_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mood_text = update.message.text

    user_data = load_user_data()
    mood_history = user_data.get(str(user_id), {}).get("mood_history", [])
    mood_history.append({
        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "mood": mood_text
    })
    user_data[str(user_id)] = {"mood_history": mood_history, **user_data.get(str(user_id), {})}
    save_user_data(user_data)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!")

# --- –†–µ–ª–∞–∫—Å–∞—Ü–∏—è ---

relax_text = (
    "–¢–µ—Ö–Ω–∏–∫–∞ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏:\n"
    "1. –ù–∞–π–¥–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ–µ –º–µ—Å—Ç–æ.\n"
    "2. –ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ –≥–ª—É–±–æ–∫–æ –≤–¥–æ—Ö–Ω–∏—Ç–µ.\n"
    "3. –ú–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–¥—ã—Ö–∞–π—Ç–µ, —Ä–∞—Å—Å–ª–∞–±–ª—è—è –º—ã—à—Ü—ã.\n"
    "4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.\n"
    "5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –æ—â—É—â–µ–Ω–∏—è—Ö —Ç–µ–ª–∞."
)

async def relax(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(relax_text)

# --- –¶–∏—Ç–∞—Ç—ã ---

quotes = [
    "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ 10% —Ç–æ–≥–æ, —á—Ç–æ —Å –≤–∞–º–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∏ 90% —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ. ‚Äî –ß–∞—Ä–ª—å–∑ –†. –°–≤–∏–Ω–¥–æ–ª–ª",
    "–°—á–∞—Å—Ç—å–µ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤—Å—ë, –∞ –≤ —É–º–µ–Ω–∏–∏ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è —Ç–æ–º—É, —á—Ç–æ –µ—Å—Ç—å. ‚Äî –ö–æ–Ω—Ñ—É—Ü–∏–π",
    "–ù–µ –±–æ–π—Ç–µ—Å—å –∏–¥—Ç–∏ –º–µ–¥–ª–µ–Ω–Ω–æ, –±–æ–π—Ç–µ—Å—å —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å."
]

import random

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(quotes))

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---

async def reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reminder <–º–∏–Ω—É—Ç—ã> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    try:
        minutes = int(args[0])
        message = " ".join(args[1:])
        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º).")
        return

    # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ job queue
    context.job_queue.run_once(reminder_callback, minutes * 60, data=(update.effective_chat.id, message))

async def reminder_callback(context: ContextTypes.DEFAULT_TYPE):
    chat_id, message = context.job.data
    await context.bot.send_message(chat_id=chat_id, text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")

# --- FAQ ---

faq_text = (
    "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
    "1. –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è? /setname –ò–≤–∞–Ω\n"
    "2. –ö–∞–∫ –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É? /diagnosis\n"
    "3. –ö–∞–∫ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é.\n"
    "4. –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? /reminder <–º–∏–Ω—É—Ç—ã> <—Å–æ–æ–±—â–µ–Ω–∏–µ>"
)

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(faq_text)

# --- –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å ---

help_text = (
    "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —ç—Ç–∏–º –Ω–æ–º–µ—Ä–∞–º:\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122\n"
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: 112\n"
    "–í –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∑–≤–æ–Ω–∏—Ç–µ 103."
)

async def helpme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(help_text)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –º–µ–Ω—é ---

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == """üìù"""
