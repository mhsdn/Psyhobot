import json
import os
import logging
import matplotlib.pyplot as plt
from datetime import datetime
from dotenv import load_dotenv
import random

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_DATA_FILE = "user_data.json"

# --- –î–∞–Ω–Ω—ã–µ –∏ —Å–ª–æ–≤–∞—Ä–∏ ---
questions = [
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –º–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏–ª–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —Ä–∞–¥–æ—Å—Ç—å?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É—Å—Ç–∞–ª—ã–º –∏–ª–∏ –±–µ–∑ —Å–∏–ª?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤–∞–º —Ç—Ä—É–¥–Ω–æ –∑–∞—Å—ã–ø–∞—Ç—å –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –æ—â—É—â–∞–µ—Ç–µ, —á—Ç–æ –≤—Å—ë –≤ –∂–∏–∑–Ω–∏ —Ç–µ—Ä—è–µ—Ç —Å–º—ã—Å–ª?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–µ—Ä–≤–Ω—ã–º –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π–Ω—ã–º?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –±–µ—Å–ø–æ–º–æ—â–Ω—ã–º –∏–ª–∏ –æ–¥–∏–Ω–æ–∫–∏–º?"
]

answer_options = ["–ù–∏–∫–æ–≥–¥–∞", "–ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π", "–ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"]
scores_map = {"–ù–∏–∫–æ–≥–¥–∞": 0, "–ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π": 1, "–ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏": 2, "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å": 3}
user_answers = {}

# --- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def load_user_data():
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = load_user_data()
    name = user_data.get(str(user_id), {}).get("name", "–¥—Ä—É–≥")

    keyboard = [
        [KeyboardButton("üìù –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton("üìî –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")],
        [KeyboardButton("üßò‚Äç‚ôÇÔ∏è –†–µ–ª–∞–∫—Å–∞—Ü–∏—è"), KeyboardButton("üí¨ –¶–∏—Ç–∞—Ç—ã")],
        [KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton("üéØ –¶–µ–ª–∏")],
        [KeyboardButton("‚ùì FAQ"), KeyboardButton("üö® –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
        "- /setname –ò–≤–∞–Ω ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è\n"
        "- /diagnosis ‚Äî –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É\n"
        "- /reminder 5 –ü–∏—Ç—å –≤–æ–¥—É ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "- –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
    )

async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    name = " ".join(context.args)
    if not name:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /setname –ò–≤–∞–Ω")
        return

    user_data = load_user_data()
    user_data.setdefault(str(user_id), {})["name"] = name
    save_user_data(user_data)
    await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!")

# --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ---
async def start_diagnosis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_answers[user_id] = []
    await ask_question(update, context, user_id, 0)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, question_number: int):
    if question_number < len(questions):
        keyboard = [
            [InlineKeyboardButton(opt, callback_data=f"answer_{user_id}_{question_number}_{opt}")]
            for opt in answer_options
        ]
        markup = InlineKeyboardMarkup(keyboard)
        question = questions[question_number]
        if update.message:
            await update.message.reply_text(question, reply_markup=markup)
        elif update.callback_query:
            await update.callback_query.message.reply_text(question, reply_markup=markup)
    else:
        await evaluate_answers(update, context, user_id)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, uid, qn, *ans_parts = query.data.split("_")
    user_id = int(uid)
    question_number = int(qn)
    answer = "_".join(ans_parts)

    user_answers[user_id].append(answer)

    if question_number + 1 < len(questions):
        await ask_question(update, context, user_id, question_number + 1)
    else:
        await evaluate_answers(update, context, user_id)

async def evaluate_answers(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    total = sum(scores_map[a] for a in user_answers[user_id])
    if total <= 5:
        result = "–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ."
    elif total <= 10:
        result = "–ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å."
    elif total <= 15:
        result = "–í–æ–∑–º–æ–∂–Ω–æ —É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è. –ü–æ–¥—É–º–∞–π—Ç–µ –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º."
    else:
        result = "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —Ç—è–∂—ë–ª—É—é –¥–µ–ø—Ä–µ—Å—Å–∏—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é."

    user_data = load_user_data()
    history = user_data.get(str(user_id), {}).get("history", [])
    history.append({"date": datetime.now().strftime("%Y-%m-%d %H:%M"), "score": total})
    user_data[str(user_id)] = {"history": history, **user_data.get(str(user_id), {})}
    save_user_data(user_data)

    await generate_progress_graph(user_id, history)

    await update.callback_query.message.edit_text(
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total}\n\n{result}\n\n–í–æ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:"
    )
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(f"progress_{user_id}.png", "rb"))

async def generate_progress_graph(user_id, history):
    dates = [entry["date"] for entry in history]
    scores = [entry["score"] for entry in history]

    plt.figure(figsize=(8, 6))
    plt.plot(dates, scores, marker='o', color='blue')
    plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ë–∞–ª–ª—ã")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.grid(True)
    plt.savefig(f"progress_{user_id}.png")
    plt.close()

# --- –î–Ω–µ–≤–Ω–∏–∫ ---
async def mood_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–∏—à–∏, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å.")

async def mood_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    user_data = load_user_data()
    mood_history = user_data.get(str(user_id), {}).get("mood_history", [])
    mood_history.append({"date": datetime.now().strftime("%Y-%m-%d %H:%M"), "mood": text})
    user_data[str(user_id)] = {"mood_history": mood_history, **user_data.get(str(user_id), {})}
    save_user_data(user_data)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.")

# --- –†–µ–ª–∞–∫—Å–∞—Ü–∏—è ---
relax_text = (
    "–¢–µ—Ö–Ω–∏–∫–∞ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏:\n"
    "1. –ù–∞–π–¥–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ–µ –º–µ—Å—Ç–æ.\n"
    "2. –ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ –≥–ª—É–±–æ–∫–æ –≤–¥–æ—Ö–Ω–∏—Ç–µ.\n"
    "3. –ú–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ, —Ä–∞—Å—Å–ª–∞–±–ª—è—è —Ç–µ–ª–æ.\n"
    "4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 5 —Ä–∞–∑.\n"
    "5. –ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ."
)

async def relax(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(relax_text)

# --- –¶–∏—Ç–∞—Ç—ã ---
quotes = [
    "–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç–æ, —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å, –≥–æ–≤–æ—Ä–∏—à—å –∏ –¥–µ–ª–∞–µ—à—å ‚Äî –≤ –≥–∞—Ä–º–æ–Ω–∏–∏. ‚Äî –ú–∞—Ö–∞—Ç–º–∞ –ì–∞–Ω–¥–∏",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
    "–¢—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∞ –Ω–µ –∂–µ—Ä—Ç–≤–∞."
]

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(quotes))

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reminder <–º–∏–Ω—É—Ç—ã> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    try:
        minutes = int(args[0])
        msg = " ".join(args[1:])
        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω.")
        context.job_queue.run_once(reminder_callback, minutes * 60, data=(update.effective_chat.id, msg))
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")

async def reminder_callback(context: ContextTypes.DEFAULT_TYPE):
    chat_id, msg = context.job.data
    await context.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {msg}")

# --- FAQ ---
faq_text = (
    "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
    "1. –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è? /setname –ò–≤–∞–Ω\n"
    "2. –ö–∞–∫ –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É? /diagnosis\n"
    "3. –ö–∞–∫ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç.\n"
    "4. –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? /reminder 10 –ü–∏—Ç—å –≤–æ–¥—É"
)

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(faq_text)

# --- –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å ---
help_text = (
    "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:\n"
    "üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122\n"
    "üìû –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: 112\n"
    "üìû –í —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∑–≤–æ–Ω–∏—Ç–µ: 103"
)

async def helpme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(help_text)

# --- –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ ---
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìù –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await start_diagnosis(update, context)
    elif text == "üìî –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è":
        await mood_start(update, context)
    elif text == "üßò‚Äç‚ôÇÔ∏è –†–µ–ª–∞–∫—Å–∞—Ü–∏—è":
        await relax(update, context)
    elif text == "üí¨ –¶–∏—Ç–∞—Ç—ã":
        await quote(update, context)
    elif text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        await update.message.reply_text("–£—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: /reminder <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç>")
    elif text == "üéØ –¶–µ–ª–∏":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ü–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif text == "‚ùì FAQ":
        await faq(update, context)
    elif text == "üö® –ü–æ–º–æ—â—å":
        await helpme(update, context)
    else:
        await mood_save(update, context)

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
¬† ¬† print("TOKEN:", repr(TOKEN))
¬† ¬† if not TOKEN or not TOKEN.startswith("1") or ":" not in TOKEN:
¬† ¬† ¬† ¬† raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")

¬† ¬† app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("setname", set_name))
    app.add_handler(CommandHandler("diagnosis", start_diagnosis))
    app.add_handler(CommandHandler("reminder", reminder))
    app.add_handler(CommandHandler("faq", faq))
    app.add_handler(CommandHandler("helpme", helpme))

    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
